import shap
import pandas as pd
import pickle
import numpy as np
from fastapi import APIRouter
import joblib

router = APIRouter()

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î model, columns, mapping, ‡πÅ‡∏•‡∏∞ CSV
try:
    joblib.load("src/model/best_model.joblib")
    with open("src/model/columns.pkl", "rb") as f:
        feature_columns = pickle.load(f)
    with open("src/model/mapping.pkl", "rb") as f:
        label_mapping = pickle.load(f)
    df = pd.read_csv("src/data/Real_Child_malnutrition.csv")
    print("‚úÖ Loaded model and dataset successfully")
except Exception as e:
    print("‚ùå ERROR while loading model or data:", e)
    raise e

# ‚úÖ Endpoint ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ global shap
@router.get("/shap/global/{status}")
def explain_global(status: str):
    try:
        print(f"üîç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠: {status}")
        print("üßæ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", df["Status_personal"].unique())

        # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ status ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        subset = df[df["Status_personal"] == status]

        if subset.empty:
            return {"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '{status}'"}

        # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô feature_columns
        X = subset[feature_columns].fillna(0)

        # ‚úÖ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ SHAP TreeExplainer
        explainer = shap.TreeExplainer(model)
        shap_values = explainer.shap_values(X)

        # ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö classification ‚Üí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö status
        status_index = list(label_mapping.values()).index(status)
        shap_class = shap_values[status_index]

        # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ absolute SHAP value ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
        mean_shap = np.abs(shap_class).mean(axis=0)

        # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å top 5 features ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        top_indices = np.argsort(mean_shap)[::-1][:5]

        result = []
        for idx in top_indices:
            feat = feature_columns[idx]
            result.append({
                "feature": feat,
                "mean_value": float(X.iloc[:, idx].mean()),
                "mean_shap": float(mean_shap[idx])
            })

        return {"top_features": result}

    except Exception as e:
        print("‚ùå ERROR ‡πÉ‡∏ô explain_global:", str(e))
        return {"error": str(e)}
