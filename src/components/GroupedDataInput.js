import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "./GroupedDataInput.css";
import clockwiseIcon from "../assets/clockwise.png";
import doneIcon from "../assets/done.png";
import foodIcon from "../assets/healthy-food.png";
import Header from "../components/layout/Header";
import Footer from "../components/layout/Footer";
import axios from "axios";


function Groupdatainput() {
  const navigate = useNavigate();

  const [groupProgress, setGroupProgress] = useState({
    general: 0,
    caregiver: 0,
    nutrition: 0,
    sanitation: 0,
  });

const [totalProgress, setTotalProgress] = useState(0);
const [childData, setChildData] = useState(null);

  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å‡∏à‡∏≤‡∏Å childId
  useEffect(() => {
    const patientId = localStorage.getItem("childId");
    if (patientId) {
      axios.get(`http://localhost:5000/patients/${patientId}`)
        .then((res) => setChildData(res.data))
        .catch((err) => console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err));
    }
  }, []);
  const handleFinalSubmit = async () => {
  const general = JSON.parse(localStorage.getItem("generalFormData") || "{}");
  const caregiver = JSON.parse(localStorage.getItem("caregiverFormData") || "{}");
  const nutrition = JSON.parse(localStorage.getItem("nutritionFormData") || "{}");
  const sanitation = JSON.parse(localStorage.getItem("sanitationFormData") || "{}");

  const patientId = localStorage.getItem("childId");
  if (!patientId) {
    alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô");
    return;
  }

  try {
    const allData = {
      patient_id: patientId,
      ...general,
      ...caregiver,
      ...nutrition,
      ...sanitation,
    };

    const response = await axios.post("http://localhost:5000/predictions/combined", allData);
    if (response.status === 200 || response.status === 201) {
      alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } else {
      alert("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  } catch (err) {
    console.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
  }
};

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î progress ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  useEffect(() => {
    const interval = setInterval(() => {
      const general = parseInt(localStorage.getItem("generalProgress") || "0");
      const caregiver = parseInt(localStorage.getItem("caregiverProgress") || "0");
      const nutrition = parseInt(localStorage.getItem("nutritionProgress") || "0");
      const sanitation = parseInt(localStorage.getItem("sanitationProgress") || "0");

      setGroupProgress({ general, caregiver, nutrition, sanitation });
    }, 1000); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(interval);
  }, []);

useEffect(() => {
  const avg =
    (groupProgress.general +
      groupProgress.caregiver +
      groupProgress.nutrition +
      groupProgress.sanitation) / 4;
  setTotalProgress(avg);
}, [groupProgress]);

  const groups = [
    {
      label: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
      description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
      path: "/form/general",
      color: "#22c55e",
      buttonGradient: "gradient-general",
      progress: groupProgress.general,
    },
    {
      label: "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏î‡∏π‡∏´‡∏•‡∏±‡∏Å",
      description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß",
      path: "/form/caregiver",
      color: "#f59e0b",
      buttonGradient: "gradient-caregiver",
      progress: groupProgress.caregiver,
    },
    {
      label: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö",
      description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô",
      path: "/form/nutrition",
      color: "#ef4444",
      buttonGradient: "gradient-nutrition",
      progress: groupProgress.nutrition,
      emoji: <img src={foodIcon} alt="‡∏≠‡∏≤‡∏´‡∏≤‡∏£" style={{ width: "40px", height: "40px" }} />,
    },
    {
      label: "‡∏™‡∏∏‡∏Ç‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•",
      description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢",
      path: "/form/sanitation",
      color: "#06b6d4",
      buttonGradient: "gradient-sanitation",
      progress: groupProgress.sanitation,
    },
  ];

  const getProgressStatus = (progress) => {
    if (progress === 100)
      return {
        icon: <img src={doneIcon} alt="done" style={{ width: "24px", height: "24px" }} />,
        text: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
      };
    if (progress > 0)
      return {
        icon: <img src={clockwiseIcon} alt="loading" style={{ width: "24px", height: "24px" }} />,
        text: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      };
    return { icon: "‚ùå", text: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°" };
  };

  return (
    <div className="dashboard-container">
      <Header />

      <main className="dashboard-main center-content">

        {childData && (
  <div style={{ textAlign: "center", marginBottom: "1rem" }}>
    <h2>‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:</h2>
    <h3 style={{ color: "#0ea5e9" }}>
      {childData.prefix_name_child} {childData.first_name_child} {childData.last_name_child}
    </h3>
    <p>HN: {childData.hn}</p>
  </div>
)}



        <h2 className="main-title" style={{ textAlign: "center" }}>
          ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å
        </h2>
        <p className="main-description" style={{ textAlign: "center" }}>
          ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        </p>

        <div className="overall-progress">
          <div className="progress-info">
            <span className="progress-label-main">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°</span>
            <span className="progress-percentage">{Math.round(totalProgress)}%</span>
          </div>
          <div className="main-progress-container">
            <div className="main-progress-bar" style={{ width: `${totalProgress}%` }} />
          </div>
          <p className="progress-status">
            {totalProgress === 100
              ? "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! üéâ"
              : `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å ${100 - Math.round(totalProgress)}% ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å`}
          </p>
        </div>

        <div className="groups-grid">
          {groups.map((group, index) => {
            const { icon, text } = getProgressStatus(group.progress);
            return (
              <div className="group-card animate-fade-in" key={index}>
                <div className="card-header">
                  <div className="emoji">{group.emoji}</div>
                  <div className="status-container">
                    <span className="status-icon">{icon}</span>
                    <span className="status-text">{text}</span>
                  </div>
                </div>

                <div className="card-content">
                  <h3 className="card-title">{group.label}</h3>
                  <p className="card-description">{group.description}</p>
                </div>

                <div className="progress-section">
                  <div className="progress-header">
                    <span className="progress-label">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
                    <span className="progress-value">{group.progress}%</span>
                  </div>
                  <div className="progress-container">
                    <div
                      className="progress-bar"
                      style={{ width: `${group.progress}%`, backgroundColor: group.color }}
                    />
                  </div>
                </div>

                <button
                  className={`action-button ${group.buttonGradient}`}
                  onClick={() => navigate(group.path)}
                >
                  <span>‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°</span>
                  <span className="arrow">‚Üí</span>
                </button>
              </div>
            );
          })}
        </div>
        {Math.round(totalProgress) === 100 && (
  <div style={{ textAlign: "center", marginTop: "2rem" }}>
    <button
      className="submit-btn"
      style={{
        background: "linear-gradient(to right, #0ea5e9, #2563eb)",
        color: "white",
        fontSize: "18px",
        padding: "12px 24px",
        borderRadius: "12px",
        fontWeight: "bold",
        boxShadow: "0 4px 12px rgba(0,0,0,0.1)"
      }}
      onClick={handleFinalSubmit}
    >
      ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    </button>
  </div>
)}

      </main>

      <Footer />
    </div>
  );
}

export default Groupdatainput;