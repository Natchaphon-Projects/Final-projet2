import React, { useState, useEffect } from "react";
import axios from "axios";
import { Search, Edit, Trash2, Eye, Plus } from "lucide-react";
import "./ManageDepartment.css";

const API_URL = "http://localhost:5000/patients";

const ManageDepartment = () => {
  const [patients, setPatients] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [editingPatient, setEditingPatient] = useState(null);
  const [viewingPatient, setViewingPatient] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [birthDate, setBirthDate] = useState("");
  const [formData, setFormData] = useState({
    hn: "",
    childPrefix: "",
    name: "",
    age: "",
    gender: "",
    parentPrefix: "",
    parent: ""
  });

  const itemsPerPage = 5;

  useEffect(() => {
    loadPatients();
  }, []);

  const loadPatients = async () => {
    try {
      const res = await axios.get(API_URL);
      console.log("üì¶ patient data:", res.data); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
      setPatients(res.data);
    } catch (err) {
      console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", err);
    }
  };

  const calculateAgeInMonths = (dob) => {
    const birth = new Date(dob);
    const today = new Date();
    const years = today.getFullYear() - birth.getFullYear();
    const months = today.getMonth() - birth.getMonth();
    return (years * 12 + months).toString();
  };

  const handleDelete = async (id) => {
    if (window.confirm("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ?")) {
      await axios.delete(`${API_URL}/${id}`);
      loadPatients();
    }
  };

 const handleSave = async () => {
  if (!formData.hn || !formData.name || !formData.age || !formData.gender || !formData.childPrefix || !formData.parentPrefix || !formData.parent) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
    return;
  }
  if (parseInt(formData.age) < 1 || parseInt(formData.age) > 60) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 60 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô");
    return;
  }

  const payload = {
    ...formData,
    birthDate: birthDate,
    name: `${formData.childPrefix} ${formData.name}`,
    parent: `${formData.parentPrefix} ${formData.parent}`,
    age: `${formData.age} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`
  };

  try {
    if (editingPatient) {
      console.log("üîÑ Updating:", editingPatient.id);
      await axios.put(`${API_URL}/${editingPatient.id}`, payload);
    } else {
      console.log("üÜï Creating New Patient");
      await axios.post(API_URL, payload);
    }

    setShowModal(false);
    setEditingPatient(null);
    setBirthDate("");
    setFormData({
      id: null,
      hn: "",
      childPrefix: "",
      name: "",
      age: "",
      gender: "",
      parentPrefix: "",
      parent: ""
    });
    loadPatients();
  } catch (err) {
    console.error("‚ùå Error saving data:", err);
    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  }
};


  const handleEdit = (patient) => {
    const rawAge = patient.age.replace(" ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "");
    const [childPrefix, ...nameParts] = patient.name.split(" ");
    const [parentPrefix, ...parentParts] = patient.parent.split(" ");

  const formattedDate = patient.birthDate
  ? new Date(patient.birthDate).toISOString().split("T")[0]
  : "";





    setEditingPatient(patient);
    setBirthDate(formattedDate); // ‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
    setFormData({
      hn: patient.hn,
      childPrefix,
      name: nameParts.join(" "),
      age: rawAge,
      gender: patient.gender,
      parentPrefix,
      parent: parentParts.join(" ")
    });
    setShowModal(true);
  };

const handleAdd = () => {
  const maxHN = Math.max(0, ...patients.map((p) => parseInt(p.hn))) + 1;
  const autoHN = maxHN.toString().padStart(5, "0");

  setEditingPatient(null);      // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  setViewingPatient(null);      // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πâ‡∏≤‡∏á
  setBirthDate("");             // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
  setFormData({                 // ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ß‡πà‡∏≤‡∏á
    id: null,                // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ß‡πâ
    hn: autoHN,
    childPrefix: "",
    name: "",
    age: "",
    gender: "",
    parentPrefix: "",
    parent: ""
  });
  setShowModal(true);
};

  const handleView = (patient) => {
    setViewingPatient(patient);
  };

  const filteredPatients = patients.filter((p) =>
    p.hn?.includes(searchTerm) || p.name?.includes(searchTerm) || p.parent?.includes(searchTerm)
  );

  const totalPages = Math.ceil(filteredPatients.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentPatients = filteredPatients.slice(startIndex, startIndex + itemsPerPage);

  return (
    <div className="manage-wrapper">
      <div className="search-header">
        <div className="left">
          <h2>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å</h2>
          <div className="search-box">
            <Search className="search-icon" />
            <input
              type="text"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ HN, ‡∏ä‡∏∑‡πà‡∏≠, ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
      </div>

      <div className="table-title">
        <h3>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡πá‡∏Å <span>{filteredPatients.length} ‡∏Ñ‡∏ô</span></h3>
        <button className="add-btn" onClick={handleAdd}>
          <Plus /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏´‡∏°‡πà
        </button>
      </div>

      <table className="modern-table">
        <thead>
          <tr>
            <th>HN</th>
            <th>‡∏ä‡∏∑‡πà‡∏≠</th>
            <th>‡∏≠‡∏≤‡∏¢‡∏∏</th>
            <th>‡πÄ‡∏û‡∏®</th>
            <th>‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á</th>
            <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {currentPatients.map((p) => (
            <tr key={p.id}>
              <td>{p.hn}</td>
              <td>{p.name}</td>
              <td>{p.age}</td>
              <td>{p.gender}</td>
              <td>{p.parent}</td>
              <td className="actions">
                <button className="icon view" onClick={() => handleView(p)}><Eye /></button>
                <button className="icon edit" onClick={() => handleEdit(p)}><Edit /></button>
                <button className="icon delete" onClick={() => handleDelete(p.id)}><Trash2 /></button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="pagination-container">
        <button onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))} disabled={currentPage === 1}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
        {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
          <button key={page} onClick={() => setCurrentPage(page)} className={currentPage === page ? "active" : ""}>{page}</button>
        ))}
        <button onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))} disabled={currentPage === totalPages}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</button>
      </div>

      {showModal && (
        <div className="modal">
          <div className="modal-content">
            <h3 style={{ textAlign: "center" }}>
              {editingPatient ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏´‡∏°‡πà"}
            </h3>

            <input className="form-input" disabled value={formData.hn} />

            <div className="form-row">
              <select className="form-input prefix-select" value={formData.childPrefix} onChange={(e) => setFormData({ ...formData, childPrefix: e.target.value })}>
                <option value="">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</option>
                <option value="‡∏î.‡∏ä.">‡∏î.‡∏ä.</option>
                <option value="‡∏î.‡∏ç.">‡∏î.‡∏ç.</option>
              </select>
              <input className="form-input name-input" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡πá‡∏Å" value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} />
            </div>

            <div className="form-row">
              <input
                type="date"
                className="form-input"
                value={birthDate}
                onChange={(e) => {
                  const dob = e.target.value;
                  setBirthDate(dob);
                  const ageInMonths = calculateAgeInMonths(dob);
                  setFormData({ ...formData, age: ageInMonths });
                }}
              />
              <input
                className="form-input age-display"
                type="text"
                value={formData.age ? `${formData.age} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô` : ""}
                disabled
                readOnly
              />
            </div>

            <select className="form-input" value={formData.gender} onChange={(e) => setFormData({ ...formData, gender: e.target.value })}>
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®</option>
              <option value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</option>
              <option value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</option>
            </select>

            <div className="form-row">
              <select className="form-input prefix-select" value={formData.parentPrefix} onChange={(e) => setFormData({ ...formData, parentPrefix: e.target.value })}>
                <option value="">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</option>
                <option value="‡∏ô‡∏≤‡∏¢">‡∏ô‡∏≤‡∏¢</option>
                <option value="‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß">‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß</option>
                <option value="‡∏ô‡∏≤‡∏á">‡∏ô‡∏≤‡∏á</option>
              </select>
              <input className="form-input name-input" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á" value={formData.parent} onChange={(e) => setFormData({ ...formData, parent: e.target.value })} />
            </div>

            <div className="button-group">
              <button className="confirm-btn" onClick={handleSave}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
              <button className="cancel-btn" onClick={() => setShowModal(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            </div>
          </div>
        </div>
      )}

      {viewingPatient && (
        <div className="modal">
          <div className="modal-content">
            <h3 style={{ textAlign: "center" }}>üëÅÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å</h3>
            <p><strong>HN:</strong> {viewingPatient.hn}</p>
            <p><strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> {viewingPatient.name}</p>
            <p><strong>‡∏≠‡∏≤‡∏¢‡∏∏:</strong> {viewingPatient.age}</p>
            <p><strong>‡πÄ‡∏û‡∏®:</strong> {viewingPatient.gender}</p>
            <p><strong>‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á:</strong> {viewingPatient.parent}</p>
            <button className="cancel-btn" onClick={() => setViewingPatient(null)}>‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ManageDepartment;
