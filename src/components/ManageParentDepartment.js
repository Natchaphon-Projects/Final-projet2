import React, { useState, useEffect } from "react";
import axios from "axios";
import { Search, Edit, Trash2, Plus } from "lucide-react";
import "./ManageParentDepartment.css";
import Header from "../components/layout/Header";
import Footer from "../components/layout/Footer";

const formatPhoneNumber = (value) => {
  const digits = value.replace(/\D/g, "").slice(0, 10);
  if (digits.length >= 7) {
    return `${digits.slice(0, 3)}-${digits.slice(3, 6)}-${digits.slice(6)}`;
  } else if (digits.length >= 4) {
    return `${digits.slice(0, 3)}-${digits.slice(3)}`;
  } else {
    return digits;
  }
};


const ManageParentDepartment = () => {
  const [parents, setParents] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [editingParent, setEditingParent] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [pendingRegisters, setPendingRegisters] = useState([]);
  const [showApprovalModal, setShowApprovalModal] = useState(false);
  const [selectedRegister, setSelectedRegister] = useState(null);
  const [selectedRegisterDetail, setSelectedRegisterDetail] = useState(null);



  const [formData, setFormData] = useState({
    hn: "",
    prefix: "",
    name: "",
    lastName: "",
    phone: "",
    houseNo: "",
    moo: "",
    alley: "",
    street: "",
    subDistrict: "",
    district: "",
    province: "",
    postalCode: ""
  });

  const itemsPerPage = 5;

  useEffect(() => {
    loadParents();
  }, []);

  const loadParents = async () => {
    try {
      const res = await axios.get("/api/parents-with-children");
      setParents(res.data);
    } catch (err) {
      console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", err);
    }
  };

  const handleSave = async () => {
    if (!formData.hn ||
      !formData.prefix ||
      !formData.name ||
      !formData.lastName ||
      !formData.phone ||
      !formData.houseNo ||
      !formData.moo ||
      !formData.subDistrict ||
      !formData.district ||
      !formData.province ||
      !formData.postalCode
    ) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    const payload = {
      hn_number: formData.hn,
      prefix: formData.prefix,
      name: formData.name,
      lastName: formData.lastName,
      phone: formData.phone,
      houseNo: formData.houseNo,
      moo: formData.moo,
      alley: formData.alley,
      street: formData.street,
      subDistrict: formData.subDistrict,
      district: formData.district,
      province: formData.province,
      postalCode: formData.postalCode
    };

    try {
      if (editingParent) {
        await axios.put(`/api/parents/${editingParent.parent_id}`, payload);
      } else {
        await axios.post("/api/parents", payload);
      }
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setShowModal(false);
      setEditingParent(null);
      resetForm();
      loadParents();
    } catch (err) {
      console.error("‚ùå Error saving data:", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  const handleRejectRegister = async (reg) => {
    if (!window.confirm("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ?")) return;
    try {
      await axios.put(`/api/reject-register/${reg.register_id}`);
      alert("‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡πâ‡∏ß");
      loadPendingRegisters();
    } catch (err) {
      console.error("‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    }
  };


  const resetForm = () => {
    setFormData({
      hn: "",
      prefix: "",
      name: "",
      lastName: "",
      phone: "",
      houseNo: "",
      moo: "",
      alley: "",
      street: "",
      subDistrict: "",
      district: "",
      province: "",
      postalCode: ""
    });
  };

  const handleAdd = () => {
    const lastParent = [...parents].sort((a, b) => parseInt(b.hn_number) - parseInt(a.hn_number))[0];
    const newHN = lastParent ? (parseInt(lastParent.hn_number) + 1).toString().padStart(5, "0") : "00001";

    setEditingParent(null);
    resetForm();
    setFormData((prev) => ({ ...prev, hn: newHN }));
    setShowModal(true);
  };

  const handleEdit = (parent) => {
    setEditingParent(parent);
    setFormData({
      hn: parent.hn_number || "",
      prefix: parent.prefix_name_parent || "",
      name: parent.first_name_parent || "",
      lastName: parent.last_name_parent || "",
      phone: parent.phone_number || "",
      houseNo: parent.houseNo || "",
      moo: parent.moo || "",
      alley: parent.alley || "",
      street: parent.street || "",
      subDistrict: parent.subDistrict || "",
      district: parent.district || "",
      province: parent.province || "",
      postalCode: parent.postalCode || ""
    });
    setShowModal(true);
  };

  const handleDelete = async (id) => {
    if (window.confirm("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏ô‡∏µ‡πâ?")) {
      await axios.delete(`/api/parents/${id}`);
      alert("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      loadParents();
    }
  };

  const filteredParents = parents.filter((p) =>
    p.parent_name?.includes(searchTerm) || p.phone_number?.includes(searchTerm) || p.parent_address?.includes(searchTerm)
  );

  useEffect(() => {
    loadParents();
    loadPendingRegisters(); // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
  }, []);

  const loadPendingRegisters = async () => {
    try {
      const res = await axios.get("/api/registers?status=pending");
      setPendingRegisters(res.data);
    } catch (err) {
      console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• register ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", err);
    }
  };


  const handleApproveRegister = async (reg) => {
    try {
      const res = await axios.post(`/api/approve-register/${reg.register_id}`, {
        admin_id: 1 // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏° admin ‡∏ó‡∏µ‡πà login
      });
      alert("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      alert(`‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ\n‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${reg.phone_number}\n OTP: 123456`);
      loadParents();
      loadPendingRegisters();
    } catch (err) {
      console.error("‚ùå ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    }
  };


  const totalPages = Math.ceil(filteredParents.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentParents = filteredParents.slice(startIndex, startIndex + itemsPerPage);
  const [selectedDetailItem, setSelectedDetailItem] = useState(null);


  return (
    <div className="dashboard-container">
      <Header currentPage="manage-parent-department" />

      <div className="manage-wrapper">
        <div className="search-header">
          <div className="left">
            <h2>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á</h2>
            <div className="search-box">
              <Search className="search-icon" />
              <input
                type="text"
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
        </div>

        <div className="table-title">
          <h3>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á <span>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {filteredParents.length} ‡∏Ñ‡∏ô</span></h3>

        </div>

        <div className="button-right-group">
          <button className="add-btn" onClick={handleAdd}>
            <Plus /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          </button>
          <button className="add-btn" onClick={() => setShowApprovalModal(true)}>
            üì• ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£
          </button>
        </div>


        <div className="table-wrapper">
          <table className="modern-table">
            <thead>
              <tr>
                <th>User ID</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á</th>
                <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                <th>‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•</th>
                <th>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</th>
                <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {currentParents.map((p) => {
                const childrenArray = p.children ? p.children.split(", ").filter(Boolean) : [];
                const relationshipsArray = p.relationships ? p.relationships.split(", ").filter(Boolean) : [];

                return (
                  <tr key={p.parent_id}>
                    <td>{p.hn_number}</td>
                    <td>{p.parent_name}</td>
                    <td>{p.phone_number?.replace(/^(\d{3})(\d{3})(\d+)/, "$1-$2-$3")}</td>
                    <td>
                      {childrenArray.length > 0 ? (
                        childrenArray.map((child, index) => {
                          const rel = relationshipsArray[index] || "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•";
                          return (
                            <div key={index}>
                              <strong>{rel}</strong> ‡∏Ç‡∏≠‡∏á <strong>{child}</strong>
                            </div>
                          );
                        })
                      ) : (
                        <span style={{ color: "#999" }}>‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•</span>
                      )}
                    </td>
                    <td>
                      <div>
                        {p.houseNo && `‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${p.houseNo} `}
                        {p.moo && `‡∏´‡∏°‡∏π‡πà ${p.moo} `}
                        {p.alley && `‡∏ã‡∏≠‡∏¢ ${p.alley} `}
                        {p.street && `‡∏ñ‡∏ô‡∏ô ${p.street} `}
                      </div>
                      <div>
                        {p.subDistrict && `‡∏ï‡∏≥‡∏ö‡∏• ${p.subDistrict} `}
                        {p.district && `‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ${p.district} `}
                        {p.province && `‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ${p.province} `}
                        {p.postalCode && `‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå ${p.postalCode}`}
                      </div>
                    </td>
                    <td className="actions">
                      <button className="icon edit" onClick={() => handleEdit(p)}><Edit /></button>
                      <button className="icon delete" onClick={() => handleDelete(p.parent_id)}><Trash2 /></button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>


        <div className="pagination-container">
          <button onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))} disabled={currentPage === 1}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
            <button key={page} onClick={() => setCurrentPage(page)} className={currentPage === page ? "active" : ""}>{page}</button>
          ))}
          <button onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))} disabled={currentPage === totalPages}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</button>
        </div>

        {showModal && (
          <div className="modal">
            <div className="modal-content">
              <h3 style={{ textAlign: "center" }}>
                {editingParent ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"}
              </h3>


              {/* ‚úÖ ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1: HN */}

              <input className="text-input" disabled value={formData.hn} />


              {/* ‚úÖ ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ + ‡∏ä‡∏∑‡πà‡∏≠ + ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• + ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ */}
              <div className="form-row">
                <select
                  className="form-input prefix-select"
                  value={formData.prefix}
                  onChange={(e) => setFormData({ ...formData, prefix: e.target.value })}
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</option>
                  <option value="‡∏ô‡∏≤‡∏¢">‡∏ô‡∏≤‡∏¢</option>
                  <option value="‡∏ô‡∏≤‡∏á">‡∏ô‡∏≤‡∏á</option>
                  <option value="‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß">‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß</option>
                </select>

                <input
                  className="text-input name-input"
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                  value={formData.name}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^‡∏Å-‡πôa-zA-Z\s]/g, "");
                    setFormData({ ...formData, name: value });
                  }}
                />

                <input
                  className="text-input name-input"
                  placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                  value={formData.lastName}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^‡∏Å-‡πôa-zA-Z\s]/g, "");
                    setFormData({ ...formData, lastName: value });
                  }}
                />

                <input
                  className="text-input name-input"
                  placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡πÄ‡∏ä‡πà‡∏ô 081-234-5678)"
                  value={formatPhoneNumber(formData.phone)}
                  maxLength={12}
                  onChange={(e) => {
                    const digits = e.target.value.replace(/\D/g, "").slice(0, 10);
                    setFormData({ ...formData, phone: digits });
                  }}
                />
              </div>


              <div className="address-row">
                <input
                  className="text-input"
                  placeholder="‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"
                  value={formData.houseNo}
                  onChange={(e) => {
                    const onlyValid = e.target.value.replace(/[^0-9/]/g, ""); // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç‡∏Å‡∏±‡∏ö "/"
                    setFormData({ ...formData, houseNo: onlyValid });
                  }}
                />


                <input
                  className="text-input"
                  placeholder="‡∏´‡∏°‡∏π‡πà"
                  value={formData.moo}
                  onChange={(e) => {
                    const digitsOnly = e.target.value.replace(/\D/g, ""); // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                    setFormData({ ...formData, moo: digitsOnly });
                  }}
                />

                <input
                  className="text-input"
                  placeholder="‡∏ã‡∏≠‡∏¢"
                  value={formData.alley}
                  onChange={(e) => setFormData({ ...formData, alley: e.target.value })}
                />
                <input
                  className="text-input"
                  placeholder="‡∏ñ‡∏ô‡∏ô"
                  value={formData.street}
                  onChange={(e) => setFormData({ ...formData, street: e.target.value })}
                />
              </div>
              <div className="address-row">
                <input
                  className="text-input"
                  placeholder="‡∏ï‡∏≥‡∏ö‡∏•"
                  value={formData.subDistrict}
                  onChange={(e) => setFormData({ ...formData, subDistrict: e.target.value })}
                />
                <input
                  className="text-input"
                  placeholder="‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
                  value={formData.district}
                  onChange={(e) => setFormData({ ...formData, district: e.target.value })}
                />
                <input
                  className="text-input"
                  placeholder="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                  value={formData.province}
                  onChange={(e) => setFormData({ ...formData, province: e.target.value })}
                />
                <input
                  className="text-input"
                  placeholder="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
                  value={formData.postalCode}
                  maxLength={5}
                  onChange={(e) => {
                    const digitsOnly = e.target.value.replace(/\D/g, ""); // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                    setFormData({ ...formData, postalCode: digitsOnly });
                  }}
                />

              </div>

              <div className="button-group">
                <button className="confirm-btn" onClick={handleSave}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                <button className="cancel-btn" onClick={() => setShowModal(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
              </div>
            </div>
          </div>
        )}
      </div>
      {showApprovalModal && (
        <div className="modal">
          <div className="modal-content approval-modal">
            <h3>üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h3>

            {pendingRegisters.length === 0 ? (
              <p className="no-pending-message">üõå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</p>
            ) : (
              <div className="approval-card-list">
                {pendingRegisters.map((pendingItem) => (
                  <div key={pendingItem.register_id} className="approval-card-horizontal">
                    <div className="approval-card-info">
                      <p>
                        <strong>User ID:</strong> {pendingItem.hn_number} &nbsp;‚Äì&nbsp;
                        <strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> {pendingItem.prefix_name_parent} {pendingItem.first_name_parent} {pendingItem.last_name_parent} &nbsp;‚Äì&nbsp;
                        <strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå:</strong> {pendingItem.phone_number?.replace(/^(\d{3})(\d{3})(\d+)/, "$1-$2-$3")}
                      </p>
                    </div>


                    <div className="approval-card-buttons">
                      <button className="detail-btn" onClick={() => setSelectedDetailItem(pendingItem)}>
                        üîç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                      </button>
                      <button className="confirm-btn" onClick={() => handleApproveRegister(pendingItem)}>
                        ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                      </button>
                      <button className="cancel-btn" onClick={() => handleRejectRegister(pendingItem)}>
                        ‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
                      </button>
                    </div>

                    {selectedDetailItem && selectedDetailItem.register_id === pendingItem.register_id && (
                      <div className="modal">
                        <div className="modal-content detail-modal">
                          <h3 className="modal-title">üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠</h3>

                          <div className="register-detail-box">
                            <div className="address-detail-grid">
                              <div><span>User ID:</span> {pendingItem.hn_number}</div>
                              <div><span>‡∏ä‡∏∑‡πà‡∏≠:</span> {pendingItem.prefix_name_parent} {pendingItem.first_name_parent} {pendingItem.last_name_parent}</div>
                              <div><span>‡πÄ‡∏ö‡∏≠‡∏£‡πå:</span> {pendingItem.phone_number?.replace(/^(\d{3})(\d{3})(\d+)/, "$1-$2-$3")}</div>

                              <div><span>‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:</span> {selectedDetailItem.houseNo}</div>
                              <div><span>‡∏´‡∏°‡∏π‡πà:</span> {selectedDetailItem.moo}</div>
                              <div><span>‡∏ã‡∏≠‡∏¢:</span> {selectedDetailItem.alley}</div>
                              <div><span>‡∏ñ‡∏ô‡∏ô:</span> {selectedDetailItem.street}</div>
                              <div><span>‡∏ï‡∏≥‡∏ö‡∏•:</span> {selectedDetailItem.subDistrict}</div>
                              <div><span>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠:</span> {selectedDetailItem.district}</div>
                              <div><span>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:</span> {selectedDetailItem.province}</div>
                              <div><span>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå:</span> {selectedDetailItem.postalCode}</div>
                            </div>
                          </div>
                          <div className="button-group">
                            <button className="cancel-btn" onClick={() => setSelectedDetailItem(null)}>‡∏õ‡∏¥‡∏î</button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}

            <div className="button-group">
              <button className="cancel-btn" onClick={() => setShowApprovalModal(false)}>‡∏õ‡∏¥‡∏î</button>
            </div>
          </div>
        </div>
      )}



      <Footer />
    </div>
  );
};

export default ManageParentDepartment;
