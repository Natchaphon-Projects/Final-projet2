// üîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö dynamic
import React, { useState, useEffect } from "react";
import { Search, Edit, Trash2, Plus } from "lucide-react";
import axios from "axios";
import "./ManageDoctorDepartment.css";
import Header from "../components/layout/Header";
import Footer from "../components/layout/Footer";

const ManageDoctorDepartment = () => {
  const [doctors, setDoctors] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [editingDoctor, setEditingDoctor] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [errorMessages, setErrorMessages] = useState([]);
  const [validationErrors, setValidationErrors] = useState({
    name: "",
    lastName: "",
    phone: "",
    specialist: "",
  });
  const [lastHN, setLastHN] = useState("");
  const [formData, setFormData] = useState({
    hn: "",
    prefix: "",
    name: "",
    lastName: "",
    phone: "",
    specialist: "",
    workSchedules: [{ day: "", time: "" }] // ‚úÖ ‡πÉ‡∏ä‡πâ array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  });

  useEffect(() => {
    const fetchLatestHN = async () => {
      try {
        const res = await axios.get("/api/last-parent-hn");
        const lastHN = res.data.last_hn || "00000";
        console.log("‡πÇ‡∏´‡∏•‡∏î HN ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", lastHN);
        setLastHN(lastHN); // ‚úÖ ‡πÉ‡∏ä‡πâ setLastHN
      } catch (err) {
        console.error("‡πÇ‡∏´‡∏•‡∏î HN ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err);
      }
    };
    fetchLatestHN();
  }, []);

  useEffect(() => {
    loadDoctors();
  }, []);

  const loadDoctors = async () => {
    try {
      const res = await axios.get("/api/doctors");
      setDoctors(res.data);
    } catch (err) {
      console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", err);
    }
  };

  const handleAddSchedule = () => {
    setFormData({
      ...formData,
      workSchedules: [...formData.workSchedules, { day: "", time: "" }]
    });
  };

  const formatPhoneNumber = (value) => {
    const digits = value.replace(/\D/g, "").slice(0, 10);
    if (digits.length >= 7) {
      return `${digits.slice(0, 3)}-${digits.slice(3, 6)}-${digits.slice(6)}`;
    } else if (digits.length >= 4) {
      return `${digits.slice(0, 3)}-${digits.slice(3)}`;
    } else {
      return digits;
    }
  };

  const handleRemoveSchedule = (index) => {
    const newSchedules = [...formData.workSchedules];
    newSchedules.splice(index, 1);
    setFormData({ ...formData, workSchedules: newSchedules });
  };

  const weekdaysOrder = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"];

  const handleScheduleChange = (index, field, value) => {
    const newSchedules = [...formData.workSchedules];
    newSchedules[index][field] = value;
    setFormData({ ...formData, workSchedules: newSchedules });
  };

  const handleAdd = () => {
    setEditingDoctor(null);
    setErrorMessages([]); // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error ‡πÄ‡∏Å‡πà‡∏≤
    setFormData({
      hn: lastHN,
      prefix: "",
      name: "",
      lastName: "",
      phone: "",
      specialist: "",
      workSchedules: [{ day: "", time: "" }]
    });
    setShowModal(true);
  };


  const handleSave = async () => {
    const errors = {
      name: "",
      lastName: "",
      phone: "",
      specialist: ""
    };

    const thaiRegex = /^[‡∏Å-‡πô\s]+$/;
    const phoneDigits = formData.phone.replace(/\D/g, "");

    if (!thaiRegex.test(formData.name)) {
      errors.name = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô";
    }
    if (!thaiRegex.test(formData.lastName)) {
      errors.lastName = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô";
    }
    if (!thaiRegex.test(formData.specialist)) {
      errors.specialist = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô";
    }
    if (phoneDigits.length !== 10 || !phoneDigits.startsWith("0")) {
      errors.phone = "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å";
    }

    const hasErrors = Object.values(errors).some((e) => e !== "");
    setValidationErrors(errors);

    if (hasErrors || formData.workSchedules.some(w => !w.day || !w.time)) {
      const messages = [];

      if (errors.name) messages.push(`‡∏ä‡∏∑‡πà‡∏≠: ${errors.name}`);
      if (errors.lastName) messages.push(`‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${errors.lastName}`);
      if (errors.phone) messages.push(`‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${errors.phone}`);
      if (errors.specialist) messages.push(`‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç: ${errors.specialist}`);

      formData.workSchedules.forEach((w, i) => {
        if (!w.day || !w.time) {
          messages.push(`‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô : ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô`);
        }
      });

      // üîÅ ‡πÉ‡∏ä‡πâ alert ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:\n\n" + messages.join("\n"));

      return;



    }
    const workDay = formData.workSchedules.map(w => w.day).join(" , ");
    const workTime = formData.workSchedules.map(w => w.time).join(" , ");

    const payload = {
      hn_number: formData.hn,
      prefix: formData.prefix,
      firstName: formData.name,
      lastName: formData.lastName,
      phone: formData.phone,
      specialist: formData.specialist,
      workDay,
      workTime
    };

    try {
      if (editingDoctor) {
        await axios.put(`/api/doctors/${editingDoctor.doctor_id}`, payload);
      } else {
        await axios.post("/api/doctors", payload);
      }
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setShowModal(false);
      setEditingDoctor(null);
      loadDoctors();
    } catch (err) {
      console.error("‚ùå Error saving doctor:", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  const handleEdit = (doctor) => {
    const days = doctor.work_day?.split(" , ") || [""];
    const times = doctor.work_time?.split(" , ") || [""];
    const workSchedules = days.map((d, i) => ({ day: d, time: times[i] || "" }));

    setEditingDoctor(doctor);
    setFormData({
      hn: doctor.hn_number,
      prefix: doctor.prefix_name_doctor,
      name: doctor.first_name_doctor,
      lastName: doctor.last_name_doctor,
      phone: doctor.phone_number,
      specialist: doctor.specialist,
      workSchedules
    });
    setShowModal(true);
  };

  const handleDelete = async (id) => {
    if (window.confirm("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≠‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ?")) {
      await axios.delete(`/api/doctors/${id}`);
      alert("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      loadDoctors();
    }
  };

  const filteredDoctors = doctors.filter((d) =>
    d.first_name_doctor?.includes(searchTerm) ||
    d.last_name_doctor?.includes(searchTerm) ||
    d.specialist?.includes(searchTerm)
  );

  return (
    <div className="dashboard-container">
      <Header currentPage="manage-department" />
      <div className="manage-wrapper">
        <div className="search-header">
          <div className="left">
            <h2>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏≠</h2>
            <div className="search-box">
              <Search className="search-icon" />
              <input
                type="text"
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
        </div>


        <div className="table-title">
          <h3>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏≠ <span>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {filteredDoctors.length} ‡∏Ñ‡∏ô</span></h3>
          <button className="add-btn" onClick={handleAdd}>
            <Plus /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≠‡πÉ‡∏´‡∏°‡πà
          </button>
        </div>

        <div className="table-scroll-wrapper">
          <table className="modern-table">
            <thead>
              <tr>
                <th>HN</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                <th>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç</th>
                <th>‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</th>
                <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {filteredDoctors.map((d) => (
                <tr key={d.doctor_id}>
                  <td>{d.hn_number}</td>
                  <td>{d.prefix_name_doctor} {d.first_name_doctor} {d.last_name_doctor}</td>
                  <td>{d.specialist}</td>
                  <td>
                    {(() => {
                      const days = d.work_day?.split(" , ") || [];
                      const times = d.work_time?.split(" , ") || [];
                      const combined = days.map((day, i) => ({ day, time: times[i] || "" }));

                      const sorted = combined.sort((a, b) => {
                        return weekdaysOrder.indexOf(a.day) - weekdaysOrder.indexOf(b.day);
                      });

                      return sorted.map((item, i) => (
                        <div key={i}>{item.day} {item.time}</div>
                      ));
                    })()}
                  </td>
                  <td>{d.phone_number?.replace(/^(\d{3})(\d{3})(\d+)/, "$1-$2-$3")}</td>
                  <td className="actions-doctor">
                    <button className="icon edit-doctor" onClick={() => handleEdit(d)}><Edit /></button>
                    <button className="icon delete-doctor" onClick={() => handleDelete(d.doctor_id)}><Trash2 /></button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>


        {showModal && (
          <div className="modal">
            <div className="modal-content">
              <h3 style={{ textAlign: "center" }}>
                {editingDoctor ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≠" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≠‡πÉ‡∏´‡∏°‡πà"}
              </h3>

              <input className="text-input" disabled value={formData.hn} />

              <div className="form-row">
                <select className="form-input prefix-select" value={formData.prefix} onChange={(e) => setFormData({ ...formData, prefix: e.target.value })}>
                  <option value="">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</option>
                  <option value="‡∏ô‡∏û.">‡∏ô‡∏û.</option>
                  <option value="‡∏û‡∏ç.">‡∏û‡∏ç.</option>
                </select>
                <input className="text-input name-input" placeholder="‡∏ä‡∏∑‡πà‡∏≠" value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value.replace(/[^\u0E00-\u0E7F\s]/g, "") })} />
                <input className="text-input name-input" placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" value={formData.lastName} onChange={(e) => setFormData({ ...formData, lastName: e.target.value.replace(/[^\u0E00-\u0E7F\s]/g, "") })} />
              </div>

              <div className="form-row">
                <input
                  className="text-input name-input"
                  placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô 081-234-5678)"
                  value={formatPhoneNumber(formData.phone)}
                  maxLength={12} // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏Ç‡∏µ‡∏î: 081-234-5678
                  onChange={(e) => {
                    let digits = e.target.value.replace(/\D/g, ""); // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç

                    // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÄ‡∏™‡∏°‡∏≠
                    if (!digits.startsWith("0")) {
                      digits = "0" + digits;
                    }

                    digits = digits.slice(0, 10); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 10 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

                    setFormData({ ...formData, phone: digits });
                  }}
                />
                <input className="text-input name-input" placeholder="‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç" value={formData.specialist} onChange={(e) => setFormData({ ...formData, specialist: e.target.value.replace(/[^‡∏Å-‡πôa-zA-Z\s]/g, "") })} />
              </div>

              {/* üîÅ ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */}
              {formData.workSchedules.map((schedule, index) => (
                <div className="form-row align-center" key={index}>
                  <select
                    className="text-input name-input"
                    value={schedule.day}
                    onChange={(e) => handleScheduleChange(index, "day", e.target.value)}
                  >
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô</option>
                    <option value="‡∏®‡∏∏‡∏Å‡∏£‡πå">‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå</option>
                    <option value="‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå">‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå</option>
                    <option value="‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£">‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£</option>
                    <option value="‡∏û‡∏∏‡∏ò">‡∏û‡∏∏‡∏ò</option>
                    <option value="‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ">‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ</option>
                    <option value="‡∏®‡∏∏‡∏Å‡∏£‡πå">‡∏®‡∏∏‡∏Å‡∏£‡πå</option>
                    <option value="‡∏®‡∏∏‡∏Å‡∏£‡πå">‡πÄ‡∏™‡∏≤‡∏£‡πå</option>
                  </select>
                  <input
                    className="text-input name-input"
                    placeholder="‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô 09:00-16:00"
                    value={schedule.time}
                    maxLength={13}
                    onChange={(e) => {
                      const inputValue = e.target.value;

                      // ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                      let digits = inputValue.replace(/\D/g, "").slice(0, 8);

                      let formatted = "";
                      const length = digits.length;

                      if (length <= 2) {
                        formatted = digits;
                        if (length === 2 && !inputValue.includes(":")) {
                          formatted += ":";
                        }
                      } else if (length <= 4) {
                        formatted = `${digits.slice(0, 2)}:${digits.slice(2)}`;
                        if (length === 4 && !inputValue.includes("-")) {
                          formatted += "-";
                        }
                      } else if (length <= 6) {
                        formatted = `${digits.slice(0, 2)}:${digits.slice(2, 4)}-${digits.slice(4)}`;
                        if (length === 6 && !inputValue.match(/:\d{2}-\d{2}$/)) {
                          formatted += ":";
                        }
                      } else {
                        formatted = `${digits.slice(0, 2)}:${digits.slice(2, 4)}-${digits.slice(4, 6)}:${digits.slice(6, 8)}`;
                      }

                      handleScheduleChange(index, "time", formatted);
                    }}
                  />

                  {/* ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ */}
                  {formData.workSchedules.length > 1 && (
                    <button
                      type="button"
                      className="icon delete"
                      style={{
                        width: "36px",
                        height: "48px",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        padding: 0,
                        marginTop: "6px",
                        alignSelf: "center",
                      }}
                      onClick={() => handleRemoveSchedule(index)}>

                      <Trash2 size={20} color="#ef4444" />
                    </button>
                  )}
                </div>
              ))}
              <button className="confirm-btn" onClick={handleAddSchedule}>+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</button>


              {errorMessages.length > 0 && (
                <div style={{ background: "#fee2e2", padding: "12px", borderRadius: "8px", marginBottom: "16px" }}>
                  <strong style={{ color: "#b91c1c" }}>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å:</strong>
                  <ul style={{ color: "#b91c1c", paddingLeft: "24px", marginTop: "8px" }}>
                    {errorMessages.map((msg, idx) => (
                      <li key={idx}>{msg}</li>
                    ))}
                  </ul>
                </div>
              )}

              <div className="button-group">
                <button className="confirm-btn" onClick={handleSave}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                <button
                  className="cancel-btn"
                  onClick={() => {
                    setShowModal(false);
                    setErrorMessages([]);
                  }}
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>

              </div>
            </div>
          </div>
        )}
      </div>
      <Footer />
    </div>
  );
};

export default ManageDoctorDepartment;
