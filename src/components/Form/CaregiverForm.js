import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import "./NutritionForm.css";

import Header from "../layout/Header";
import Footer from "../layout/Footer";
import axios from "axios";


const caregiverGroups = [
  {
    groupTitle: "‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å",
    groupNote: "‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° ‚òê",
    questions: [
      { key: "Guardian", label: "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏î‡πá‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", type: "checkbox" },
      { key: "Is_Respondent_Biological_Mother", label: "‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", type: "checkbox" },
    ],
  },
  
];

function CaregiverForm() {
  const navigate = useNavigate();
  const location = useLocation();

  const pages = [
    "/form/general",
    "/form/caregiver",
    "/form/nutrition",
    "/form/sanitation",
  ];

  const currentIndex = pages.indexOf(location.pathname);
  const nextIndex = (currentIndex + 1) % pages.length;
  const nextPage = pages[nextIndex];
  const prevIndex = (currentIndex - 1 + pages.length) % pages.length;
  const prevPage = pages[prevIndex];
  const [patientId, setPatientId] = useState(null);
  const [childData, setChildData] = useState(null);
const [showConfirmPopup, setShowConfirmPopup] = useState(false);
const [pendingSubmitGroup, setPendingSubmitGroup] = useState(null);
  const [formData, setFormData] = useState(() => {
  const saved = localStorage.getItem("caregiverFormData");
  return saved ? JSON.parse(saved) : {};
});
useEffect(() => {
  localStorage.setItem("caregiverFormData", JSON.stringify(formData));
}, [formData]);

  const [expandedGroup, setExpandedGroup] = useState(0);
  const [completedGroups, setCompletedGroups] = useState([]);
  useEffect(() => {
  const savedCompleted = localStorage.getItem("caregiverCompletedGroups");
  if (savedCompleted) {
    const parsed = JSON.parse(savedCompleted);
    setCompletedGroups(parsed);
    // ‡∏õ‡∏¥‡∏î accordion ‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏Å‡πÉ‡∏ô saved ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡πâ‡∏ß
    if (parsed.length > 0) {
      setExpandedGroup(-1);
    }
  }
}, []);


  const [completion, setCompletion] = useState(0);

  // üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalProgress ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô GroupedDataInput
  const totalProgress =
    (parseInt(localStorage.getItem("generalProgress") || 0) +
      parseInt(localStorage.getItem("caregiverProgress") || 0) +
      parseInt(localStorage.getItem("nutritionProgress") || 0) +
      parseInt(localStorage.getItem("sanitationProgress") || 0)) / 4;


  const handleChange = (key, value) => {
    setFormData((prev) => ({
      ...prev,
      [key]: value,
    }));
  };

  const handleGroupComplete = (index) => {
    const group = caregiverGroups[index];


    const requiredKeys = group.questions.map(q => q.key);

    const isComplete = requiredKeys.every(key => {
      const value = formData[key];
      const question = group.questions.find(q => q.key === key);

      if (question.type === "number") {
        return value !== "" && value !== undefined;
      } else if (question.type === "dropdown") {
        return value !== "" && value !== undefined;
      }

      return true;
    });

    if (!isComplete) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚úÖ");
      return;
    }

    setCompletedGroups((prevCompletedGroups) => {
      let newCompleted = prevCompletedGroups;

      if (!prevCompletedGroups.includes(index)) {
        newCompleted = [...prevCompletedGroups, index];
      }

      if (index + 1 < caregiverGroups.length) {

        setExpandedGroup(index + 1);
      } else {
        setExpandedGroup(-1);
      }

      localStorage.setItem("caregiverCompletedGroups", JSON.stringify(newCompleted));
      
      return newCompleted;
    });
  };

  const toggleGroup = (index) => {
    setExpandedGroup((prev) => (prev === index ? -1 : index));
  };

const handleSubmit = (goNext = false) => {
  if (!patientId) {
    alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ");
    return;
  }

  const dataToSend = {
    patient_id: patientId,
    ...formData,
    created_at: new Date().toISOString()
  };

  axios.post("http://localhost:5000/predictions", dataToSend)
    .then(() => {
      alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
      if (goNext) navigate(nextPage);
    })
    .catch((err) => {
      console.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
    });
};


  useEffect(() => {
  const totalGroups = caregiverGroups.length;
    const completedCount = completedGroups.length;
    const percent = Math.round((completedCount / totalGroups) * 100);
    setCompletion(percent);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏á localStorage ‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô GroupedDataInput)
  localStorage.setItem("caregiverProgress", percent.toString());
  }, [completedGroups]);
useEffect(() => {
  const childId = localStorage.getItem("childId");
  if (childId) {
    axios.get(`http://localhost:5000/patients/${childId}`)
      .then((res) => {
        setChildData(res.data);
        setPatientId(childId);
      })
      .catch((err) => console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err));
  } else {
    console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö childId ‡πÉ‡∏ô localStorage");
  }
}, []);

  return (
    
    <div className="dashboard-container">
      <Header currentPage="form-nutrition" />

    
      {/* ‚úÖ ‡πÅ‡∏ñ‡∏ö progress ‡∏£‡∏ß‡∏° */}
      <div className="overall-progress">
        <div className="progress-info">
          <span className="progress-label-main">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°</span>
          <span className="progress-percentage">{Math.round(totalProgress)}%</span>
        </div>
        <div className="main-progress-container">
          <div className="main-progress-bar" style={{ width: `${totalProgress}%` }} />
        </div>
        <p className="progress-status">
          {totalProgress === 100
            ? "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! üéâ"
            : `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å ${100 - Math.round(totalProgress)}% ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å`}
        </p>
      </div>

      <div className="nutrition-form-container">
        <div className="nutrition-card">
          {childData && (
  <div style={{ textAlign: "center", marginBottom: "1rem" }}>
    <h3>‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á: {childData.prefix_name_child} {childData.first_name_child} {childData.last_name_child}</h3>
    <p>HN: {childData.hn}</p>
  </div>
)}

          <h2 className="nutrition-title">‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏∏‡πÅ‡∏•‡πÄ‡∏î‡πá‡∏Å</h2>
          <p className="nutrition-subtitle">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏∏‡πÅ‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å</p>

          {/* ‚úÖ Progress */}
          <div className="progress-section">
            <span className="progress-label">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {completion}%</span>
            <div className="progress-bar-wrapper">
              <div className="progress-bar-fill" style={{ width: `${completion}%` }} />
            </div>
          </div>

          {/* ‚úÖ Groups */}
          {caregiverGroups.map((group, index) => (
            <div className="accordion-group" key={index}>
              <button
                className={`accordion-toggle ${completedGroups.includes(index) ? "completed-group" : ""}`}
                onClick={() => toggleGroup(index)}
              >
                {group.groupTitle}
                <span>{expandedGroup === index ? "‚ñ≤" : "‚ñº"}</span>
              </button>

              {expandedGroup === index && (
                <div className="accordion-content">
                  {group.groupNote && <div className="group-note">{group.groupNote}</div>}

                  <div className="checkbox-grid">
                    {group.questions.map(({ key, label, type }) =>
                      type === "checkbox" ? (
                        <div className="checkbox-row" key={key}>
                          <input
                            type="checkbox"
                            id={key}
                            checked={formData[key] || false}
                            onChange={(e) => handleChange(key, e.target.checked)}
                          />
                          <label htmlFor={key}>{label}</label>
                        </div>
                      ) : null
                    )}
                  </div>

                  {group.questions.some((q) => q.type === "number" || q.type === "dropdown") && (
                    <div className="number-grid">
                      {group.questions.map(({ key, label, type, options }) => {
                        if (type === "number") {
                          return (
                            <div className="number-item" key={key}>
                              <label className="question-label">
                                {label}
                                <input
                                  type="number"
                                  value={formData[key] || ""}
                                  onChange={(e) => handleChange(key, e.target.value)}
                                  className="number-input"
                                />
                              </label>
                            </div>
                          );
                        } else if (type === "dropdown") {
                          return (
                            <div className="number-item" key={key}>
                              <label className="question-label">
                                {label}
                                <select
                                  value={formData[key] || ""}
                                  onChange={(e) => handleChange(key, e.target.value)}
                                  className="number-input"
                                >
                                  <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
                                  {options.map((opt, idx) => (
                                    <option key={idx} value={opt}>{opt}</option>
                                  ))}
                                </select>
                              </label>
                            </div>
                          );
                        }

                        return null;
                      })}
                    </div>
                  )}

                 <button
  className="complete-btn"
  onClick={() => {
    setPendingSubmitGroup(index);
    setShowConfirmPopup(true);
  }}
>
  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
</button>
                </div>
              )}
            </div>
          ))}

          {completedGroups.length === caregiverGroups.length && totalProgress === 100 && (
  <button
    className="submit-btn"
    onClick={() => navigate("/parent-risk-assessment")}
    style={{ background: "linear-gradient(to right, #22c55e, #16a34a)" }}
  >
    üéâ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏∏‡∏û‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
  </button>
)}


         <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              gap: "1rem",
              marginTop: "2rem",
            }}
          >
            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ */}
            <button
              className="submit-btn"
              onClick={() => navigate(prevPage)}
              style={{ background: "linear-gradient(to right, #3b82f6, #2563eb)" }}
            >
              ‚óÄ ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </button>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ GroupedDataInput */}
            <button
              className="submit-btn"
              onClick={() => navigate("/parent-risk-assessment")} // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á path ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ GroupedDataInput
              style={{ background: "linear-gradient(to right, #f59e0b, #f97316)" }}
            >
              üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà */}
            <button
              className="submit-btn"
              onClick={() => navigate(nextPage)}
              style={{ background: "linear-gradient(to right, #10b981, #06b6d4)" }}
            >
              ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ûú
            </button>
          </div>


        </div>
      </div>
      {showConfirmPopup && (
  <div className="popup-overlay">
    <div className="popup-box">
      <h3>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>

      <ul className="popup-list">
        {pendingSubmitGroup !== null &&
          caregiverGroups[pendingSubmitGroup].questions.map((q) => (
            <li className="popup-row" key={q.key}>
              <span className="popup-label">{q.label}</span>
              <span
                className={`popup-value ${formData[q.key] ? "success" : "error"}`}
              >
                {formData[q.key] ? "‡πÄ‡∏õ‡πá‡∏ô" : "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô"}
              </span>
            </li>
          ))}
      </ul>

      <div className="popup-actions">
        <button
          className="cancel"
          onClick={() => {
            setShowConfirmPopup(false);
            setPendingSubmitGroup(null);
          }}
        >
          ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </button>
       <button
  className="confirm"
  onClick={() => {
    setShowConfirmPopup(false);
    handleGroupComplete(pendingSubmitGroup); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
    setPendingSubmitGroup(null);
    navigate(nextPage); // ‚úÖ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  }}
>
  ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚ûú
</button>

      </div>
    </div>
  </div>
)}
      <Footer />
    </div>
  );
}

export default CaregiverForm;
