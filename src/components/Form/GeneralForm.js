import React, { useState, useEffect } from "react";
import "./NutritionForm.css";
import Header from "../layout/Header";
import Footer from "../layout/Footer";
import { useNavigate, useLocation } from "react-router-dom";
import axios from "axios";
import { useRef } from "react";



const nutritionGroups = [
  {
    groupTitle: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
    groupNote: "‚úèÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç",
    questions: [
      { key: "Weight", label: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å(‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)", type: "number" },
      { key: "Height", label: "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á(‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)", type: "number" },
    ],
  },
  {
    groupTitle: "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ",
    groupNote: "‚úèÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ",
    questions: [
      { key: "Food_allergies", label: "‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£", type: "text" },
      { key: "Drug_allergy", label: "‡πÅ‡∏û‡πâ‡∏¢‡∏≤", type: "text" },
      { key: "congenital_disease", label: "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß", type: "text" },
    ],
  },
  {
    groupTitle: "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
    groupNote: "‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏é‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° ‚òê",
    questions: [
      { key: "Last_Month_Weight_Check", label: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", type: "checkbox" },
      { key: "Weighed_Twice_Check_in_Last_3_Months", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", type: "checkbox" }
    ],
  },
];



function GeneralForm() {
  const navigate = useNavigate();
  const location = useLocation();

  const pages = [
    "/form/general",
    "/form/caregiver",
    "/form/nutrition",
    "/form/sanitation",
  ];

  const currentIndex = pages.indexOf(location.pathname);
  const nextPage = pages[(currentIndex + 1) % pages.length];
  const prevPage = pages[(currentIndex - 1 + pages.length) % pages.length];

  const [formData, setFormData] = useState(() => {
    const saved = localStorage.getItem("generalFormData");
    return saved ? JSON.parse(saved) : {};
  });

  const [expandedGroup, setExpandedGroup] = useState(null); // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
  const [completedGroups, setCompletedGroups] = useState([]);
  const [completion, setCompletion] = useState(0);
  const groupRefs = useRef([]);
  const [patientId, setPatientId] = useState(null);
  const [childData, setChildData] = useState(null);
  const [showConfirmPopup, setShowConfirmPopup] = useState(false);
  const [pendingSubmitGroup, setPendingSubmitGroup] = useState(null);


  const totalProgress =
    (parseInt(localStorage.getItem("generalProgress") || 0) +
      parseInt(localStorage.getItem("caregiverProgress") || 0) +
      parseInt(localStorage.getItem("nutritionProgress") || 0) +
      parseInt(localStorage.getItem("sanitationProgress") || 0)) / 4;




  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ formData ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    localStorage.setItem("generalFormData", JSON.stringify(formData)); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
  }, [formData]);
  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  useEffect(() => {
    const savedCompleted = localStorage.getItem("generalCompletedGroups");
    if (savedCompleted) {
      const parsed = JSON.parse(savedCompleted);
      setCompletedGroups(parsed);

      // ‚úÖ ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥
      const firstIncompleteIndex = nutritionGroups.findIndex((_, index) => !parsed.includes(index));
      if (firstIncompleteIndex !== -1) {
        setExpandedGroup(firstIncompleteIndex);
      } else {
        setExpandedGroup(null); // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      }
    } else {
      // ‚úÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡πÄ‡∏•‡∏¢ ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏Å
      setExpandedGroup(0);
    }
  }, []);


  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å
  useEffect(() => {
    const childId = localStorage.getItem("childId");
    if (childId) {
      axios.get(`/api/patients/${childId}`)
        .then((res) => {
          setChildData(res.data);
          setPatientId(childId);
        })
        .catch((err) => console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err));
    } else {
      console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö childId ‡πÉ‡∏ô localStorage");
    }
  }, []);

  const handleChange = (key, value) => {
    setFormData((prev) => ({
      ...prev,
      [key]: value,
    }));
  };

  const handleGroupComplete = (index) => {
    const group = nutritionGroups[index];
    let requiredKeys = [];

    if (index === 0) {
      // ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å/‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å
      requiredKeys = ["Weight", "Height"];
    }

    const isComplete = requiredKeys.every((key) => {
      const value = formData[key];
      return value !== "" && value !== undefined && !isNaN(value) && parseFloat(value) > 0;
    });



    if (!isComplete) {
      alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å' ‡πÅ‡∏•‡∏∞ '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á' ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô");
      return;
    }


    setCompletedGroups((prev) => {
      const newCompleted = prev.includes(index) ? prev : [...prev, index];
      if (index + 1 < nutritionGroups.length) {
        setExpandedGroup(index + 1);
        setTimeout(() => {
          groupRefs.current[index + 1]?.scrollIntoView({ behavior: "smooth", block: "start" });
        }, 300);
      } else {
        setExpandedGroup(-1);
      }


      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
      localStorage.setItem("generalCompletedGroups", JSON.stringify(newCompleted));

      return newCompleted;
    });

  };

  const toggleGroup = (index) => {
    setExpandedGroup((prev) => (prev === index ? -1 : index));
  };

  const confirmSubmit = (index) => {
    setPendingSubmitGroup(index);
    setShowConfirmPopup(true);
  };


  const handleSubmit = (goNext = false) => {
    if (!patientId) {
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ");
      return;
    }

    const dataToSend = {
      patient_id: patientId,
      height: formData["Height"],
      weight: formData["Weight"],
      visit_date: new Date().toISOString().split("T")[0]
    };
  };

  useEffect(() => {
    const percent = Math.round((completedGroups.length / nutritionGroups.length) * 100);
    setCompletion(percent);
    localStorage.setItem("generalProgress", percent.toString());
  }, [completedGroups]);

  return (
    <div className="dashboard-container">
      <Header currentPage="form-nutrition" />

      {/* ‚úÖ ‡πÅ‡∏ñ‡∏ö progress ‡∏£‡∏ß‡∏° */}
      <div className="overall-progress">
        <div className="progress-info">
          <span className="progress-label-main">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°</span>
          <span className="progress-percentage">{Math.round(totalProgress)}%</span>
        </div>
        <div className="main-progress-container">
          <div className="main-progress-bar" style={{ width: `${totalProgress}%` }} />
        </div>
        <p className="progress-status">
          {totalProgress === 100
            ? "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! üéâ"
            : `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å ${100 - Math.round(totalProgress)}% ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å`}
        </p>
      </div>

      <div className="nutrition-form-container">
        {showConfirmPopup && (
          <div className="popup-overlay">
            <div className="popup-box">
              <h3>üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</h3>
              <ul className="popup-list">
                {nutritionGroups.flatMap((group) => group.questions).map(({ key, label, type }) => {
                  const value = formData[key];

                  let displayValue;
                  if (type === "checkbox") {
                    displayValue = (
                      <span className={value ? "success" : "error"}>
                        {value ? "‚úÖ ‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥" : "‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥"}
                      </span>
                    );
                  } else {
                    displayValue = <span>{value || "-"}</span>;
                  }

                  return (
                    <li key={key} className="popup-row">
                      <span className="popup-label">{label}</span>
                      <span className={`popup-value ${type === "checkbox" ? (value ? "success" : "error") : ""}`}>
                        {type === "checkbox"
                          ? value
                            ? "‚úÖ ‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥"
                            : "‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥"
                          : value || "-"}
                      </span>
                    </li>

                  );
                })}
              </ul>

              <div className="popup-actions">
                <button className="cancel" onClick={() => setShowConfirmPopup(false)}>
                  ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button
                  className="confirm"
                  onClick={() => {
                    setShowConfirmPopup(false);
                    handleGroupComplete(pendingSubmitGroup);
                    handleSubmit(true);
                    navigate(nextPage); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                  }}
                >
                  ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚ûú
                </button>

              </div>

            </div>
          </div>
        )}

        <div className="nutrition-card">
          {childData && (
            <div style={{ textAlign: "center", marginBottom: "1rem" }}>
              <h3>‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á: {childData.prefix_name_child} {childData.first_name_child} {childData.last_name_child}</h3>
              <p>HN: {childData.hn_number}</p>
            </div>
          )}

          <h2 className="nutrition-title">‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å</h2>
          <p className="nutrition-subtitle">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å</p>

          {/* ‚úÖ Progress */}
          <div className="progress-section">
            <span className="progress-label">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {completion}%</span>
            <div className="progress-bar-wrapper">
              <div className="progress-bar-fill" style={{ width: `${completion}%` }} />
            </div>
          </div>

          {/* ‚úÖ Groups */}
          {nutritionGroups.map((group, index) => (
            <div
              className="accordion-group"
              key={index}
              ref={(el) => (groupRefs.current[index] = el)}
            >

              <button
                className={`accordion-toggle ${completedGroups.includes(index) ? "completed-group" : ""}`}
                onClick={() => toggleGroup(index)}
              >
                {group.groupTitle}
                <span>{expandedGroup === index ? "‚ñ≤" : "‚ñº"}</span>
              </button>

              {expandedGroup === index && (
                <div className="accordion-content">
                  {group.groupNote && <div className="group-note">{group.groupNote}</div>}

                  <div className="checkbox-grid">
                    {group.questions.map(({ key, label, type }) =>
                      type === "checkbox" ? (
                        <div className="checkbox-row" key={key}>
                          <input
                            type="checkbox"
                            id={key}
                            checked={formData[key] || false}
                            onChange={(e) => handleChange(key, e.target.checked)}
                          />
                          <label htmlFor={key}>{label}</label>
                        </div>
                      ) : null
                    )}
                  </div>

                    {group.questions.some((q) => q.type === "text") && (
                      <div className="text-grid">
                        {group.questions.map(({ key, label, type }) => {
                          if (type === "text") {
                            return (
                              <div className="text-item" key={key}>
                                <label className="question-label">
                                  {label}
                                  <input
                                    type="text"
                                    value={formData[key] || ""}
                                    onChange={(e) => {
                                      const input = e.target.value;
                                      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                                      if (/^[A-Za-z‡∏Å-‡πô-\s]*$/.test(input)) {
                                        handleChange(key, input);
                                      }
                                    }}
                                    className="text-input"
                                  />
                                </label>
                              </div>
                            );
                          }
                          return null;
                        })}
                      </div>
                    )}


                  {group.questions.some((q) => q.type === "number" || q.type === "dropdown") && (
                    <div className="number-grid">

                      {group.questions.map(({ key, label, type, options }) => {
                        if (type === "number") {
                          return (
                            <div className="number-item" key={key}>
                              <label className="question-label">
                                {label}
                                <input
                                  type="number"
                                  value={formData[key] || ""}
                                  onChange={(e) => handleChange(key, e.target.value)}
                                  className="number-input"
                                />
                                {/* ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç error message */}
                                {key === "Weight" &&
                                  (!formData.Weight || parseFloat(formData.Weight) <= 0) && (
                                    <span className="error-msg">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0</span>
                                  )}
                                {key === "Height" &&
                                  (!formData.Height || parseFloat(formData.Height) <= 0) && (
                                    <span className="error-msg">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0</span>
                                  )}
                              </label>
                            </div>
                          );
                        }
                        else if (type === "dropdown") {
                          return (
                            <div className="number-item" key={key}>
                              <label className="question-label">
                                {label}
                                <select
                                  value={formData[key] || ""}
                                  onChange={(e) => handleChange(key, e.target.value)}
                                  className="number-input"
                                >
                                  <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
                                  {options.map((opt, idx) => (
                                    <option key={idx} value={opt}>{opt}</option>
                                  ))}
                                </select>
                              </label>
                            </div>
                          );
                        }

                        return null;
                      })}
                    </div>
                  )}

                  {index === nutritionGroups.length - 1 ? (
                    <>
                      <button
                        className={`complete-btn ${!completedGroups.includes(0) ? 'disabled-btn' : ''}`}
                        disabled={!completedGroups.includes(0)} // ‚ùó ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° logic ‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ
                        onClick={() => confirmSubmit(index)}
                      >
                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                      </button>


                      {!completedGroups.includes(0) && (
                        <p style={{ color: "#ef4444", fontWeight: 500, marginTop: "0.5rem" }}>
                          ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‚Äù ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                        </p>
                      )}

                    </>
                  ) : (
                    <button className="complete-btn" onClick={() => handleGroupComplete(index)}>
                      ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ûî
                    </button>
                  )}


                </div>
              )}
            </div>
          ))}

          {completedGroups.length === nutritionGroups.length && totalProgress === 100 && (

            <button
              className="submit-btn"
              style={{ background: "linear-gradient(to right, #22c55e, #16a34a)" }}
              onClick={async () => {
                const isSubmitting = localStorage.getItem("isSubmitting");
                if (isSubmitting === "true") return;

                localStorage.setItem("isSubmitting", "true");

                const general = JSON.parse(localStorage.getItem("generalFormData") || "{}");
                const caregiver = JSON.parse(localStorage.getItem("caregiverFormData") || "{}");
                const nutrition = JSON.parse(localStorage.getItem("nutritionFormData") || "{}");
                const sanitation = JSON.parse(localStorage.getItem("sanitationFormData") || "{}");
                const patientId = localStorage.getItem("childId");

                if (!patientId) {
                  alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏´‡∏°‡πà");
                  localStorage.setItem("isSubmitting", "false");
                  return;
                }
                
                  const allData = {
                  patient_id: patientId,
                  ...general,
                  ...caregiver,
                  ...nutrition,
                  ...sanitation,
                };


                const requiredKeys = [
                  "Guardian", "Vitamin_A_Intake_First_8_Weeks", "Sanitary_Disposal",
                  "Mom_wash_hand_before_or_after_cleaning_children", "Mom_wash_hand_before_or_after_feeding_the_child",
                  "Child_wash_hand_before_or_after_eating_food", "Child_wash_hand_before_or_after_visiting_the_toilet",
                  "Last_Month_Weight_Check", "Weighed_Twice_Check_in_Last_3_Months",
                  "Given_Anything_to_Drink_in_First_6_Months", "Still_Breastfeeding",
                  "Is_Respondent_Biological_Mother", "Breastfeeding_Count_DayandNight",
                  "Received_Vitamin_or_Mineral_Supplements", "Received_Plain_Water",
                  "Infant_Formula_Intake_Count_Yesterday", "Received_Animal_Milk",
                  "Received_Animal_Milk_Count", "Received_Juice_or_Juice_Drinks",
                  "Received_Yogurt", "Received_Yogurt_Count", "Received_Thin_Porridge",
                  "Received_Tea", "Received_Other_Liquids", "Received_Grain_Based_Foods",
                  "Received_Orange_Yellow_Foods", "Received_White_Root_Foods",
                  "Received_Dark_Green_Leafy_Veggies", "Received_Ripe_Mangoes_Papayas",
                  "Received_Other_Fruits_Vegetables", "Received_Meat", "Received_Eggs",
                  "Received_Fish_Shellfish_Seafood", "Received_Legumes_Nuts_Foods",
                  "Received_Dairy_Products", "Received_Oil_Fats_Butter",
                  "Received_Sugary_Foods", "Received_Chilies_Spices_Herbs",
                  "Received_Grubs_Snails_Insects", "Received_Other_Solid_Semi_Solid_Food",
                  "Received_Salt", "Number_of_Times_Eaten_Solid_Food"
                ];

                // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î = 0
                requiredKeys.forEach((key) => {
                  if (!(key in allData)) {
                    allData[key] = 0;
                  }
                });

                localStorage.setItem("latestPredictionData", JSON.stringify(allData));
                localStorage.setItem("isSubmitting", "false");
                navigate("/prediction-result");
              }}
            >
              ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏∏‡∏û‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
            </button>
          )}


          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              gap: "1rem",
              marginTop: "2rem",
            }}
          >
            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ */}
            <button
              className="submit-btn"
              onClick={() => navigate(prevPage)}
              style={{ background: "linear-gradient(to right, #3b82f6, #2563eb)" }}
            >
              ‚óÄ ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </button>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ GroupedDataInput */}
            <button
              className="submit-btn"
              onClick={() => navigate("/parent-risk-assessment")} // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á path ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ GroupedDataInput
              style={{ background: "linear-gradient(to right, #f59e0b, #f97316)" }}
            >
              üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà */}
            <button
              className="submit-btn"
              onClick={() => navigate(nextPage)}
              style={{ background: "linear-gradient(to right, #10b981, #06b6d4)" }}
            >
              ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ûú
            </button>
          </div>



        </div>
      </div>
      <Footer />
    </div>
  );
}

export default GeneralForm;
