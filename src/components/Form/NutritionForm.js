import React, { useState, useEffect } from "react";
import "./NutritionForm.css";
import Header from "../layout/Header";
import Footer from "../layout/Footer";
import { useNavigate, useLocation } from "react-router-dom";
import axios from "axios"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ backend

const nutritionGroups = [
  {
    groupTitle: "‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ô‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å",
    groupNote: "‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° ‚òê",
    questions: [
      { key: "Still_Breastfeeding", label: "‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ô‡∏°‡πÅ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà", type: "checkbox" },
      { key: "Received_Animal_Milk", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ô‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ô‡∏°‡πÅ‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏°‡∏ß‡∏±‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏°‡πÅ‡∏û‡∏∞ ", type: "checkbox" },
      { key: "Received_Yogurt", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏¢‡πÄ‡∏Å‡∏¥‡∏£‡πå‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏¢‡πÄ‡∏Å‡∏¥‡∏£‡πå‡∏ï", type: "checkbox" },
      { key: "Received_Dairy_Products", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏à‡∏≤‡∏Å‡∏ô‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", type: "checkbox" },
    ],
  },
  {
    groupTitle: "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
    groupNote: "‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° ‚òê",
    questions: [
      { key: "Given_Anything_to_Drink_in_First_6_Months", label: "‡πÑ‡∏î‡πâ‡∏î‡∏∑‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡∏ï‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏£‡∏Å", type: "checkbox" },
      { key: "Received_Plain_Water", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤", type: "checkbox" },
      { key: "Received_Juice_or_Juice_Drinks", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ", type: "checkbox" },
      { key: "Received_Tea", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ú‡∏™‡∏°‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô", type: "checkbox" },
      { key: "Received_Other_Liquids", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏î‡∏•‡∏° ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô", type: "checkbox" },
    ],
  },
  {
    groupTitle: "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
    groupNote: "‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° ‚òê",
    questions: [
      { key: "Received_Thin_Porridge", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏à‡πä‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™ ‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏à‡πä‡∏Å‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏à‡πä‡∏Å‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä", type: "checkbox" },
      { key: "Received_Grain_Based_Foods", label: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏à‡∏≤‡∏Å‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á ‡∏Ç‡πâ‡∏≤‡∏ß ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß", type: "checkbox" },
      { key: "Received_Orange_Yellow_Foods", label: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ú‡∏±‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏µ‡∏™‡πâ‡∏°/‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á ‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó", type: "checkbox" },
      { key: "Received_White_Root_Foods", label: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏õ‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏±‡∏ô‡πÄ‡∏ó‡∏®‡∏Ç‡∏≤‡∏ß ‡∏°‡∏±‡∏ô‡πÄ‡∏ú‡∏∑‡∏≠‡∏Å", type: "checkbox" },
      { key: "Received_Dark_Green_Leafy_Veggies", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏±‡∏Å‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡∏±‡∏Å‡πÇ‡∏Ç‡∏° ‡∏Ñ‡∏∞‡∏ô‡πâ‡∏≤", type: "checkbox" },
      { key: "Received_Ripe_Mangoes_Papayas", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏∞‡∏•‡∏∞‡∏Å‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡∏™‡∏∏‡∏Å", type: "checkbox" },
      { key: "Received_Other_Fruits_Vegetables", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ/‡∏ú‡∏±‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≤‡∏ß", type: "checkbox" },
      { key: "Received_Meat", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ", type: "checkbox" },
      { key: "Received_Eggs", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏Ç‡πà", type: "checkbox" },
      { key: "Received_Fish_Shellfish_Seafood", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏•‡∏≤ ‡∏Å‡∏∏‡πâ‡∏á ‡∏´‡∏≠‡∏¢", type: "checkbox" },
      { key: "Received_Legumes_Nuts_Foods", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏ñ‡∏±‡πà‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡πà‡∏ß‡∏ï‡πà‡∏≤‡∏á‡πÜ", type: "checkbox" },
      { key: "Received_Oil_Fats_Butter", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡πÄ‡∏ô‡∏¢ ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå", type: "checkbox" },
      { key: "Received_Sugary_Foods", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ß‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï ‡∏•‡∏π‡∏Å‡∏Å‡∏ß‡∏≤‡∏î ‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô", type: "checkbox" },
      { key: "Received_Chilies_Spices_Herbs", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏®/‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", type: "checkbox" },
      { key: "Received_Grubs_Snails_Insects", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡πà‡∏≠‡∏ô/‡∏´‡∏≠‡∏¢‡∏ó‡∏≤‡∏Å/‡∏´‡∏ô‡∏≠‡∏ô", type: "checkbox" },
      { key: "Received_Other_Solid_Semi_Solid_Food", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°", type: "checkbox" },
      { key: "Received_Salt", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", type: "checkbox" },
    ],
  },
  {
    groupTitle: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°",
    groupNote: "‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° ‚òê",
    questions: [
      { key: "Received_Vitamin_or_Mineral_Supplements", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏£‡πà‡∏ò‡∏≤‡∏ï‡∏∏", type: "checkbox" },
      { key: "Vitamin_A_Intake_First_8_Weeks", label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡πÄ‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 8 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", type: "checkbox" },
    ],
  },
  {
    groupTitle: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    groupNote: "‚úèÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç",
    questions: [
      { key: "Infant_Formula_Intake_Count_Yesterday", label: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ô‡∏°‡∏ú‡∏á", type: "number" },
      { key: "Breastfeeding_Count_DayandNight", label: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ô‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô", type: "number" },
      { key: "Received_Animal_Milk_Count", label: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ô‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå", type: "number" },
      { key: "Received_Yogurt_Count", label: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡πÇ‡∏¢‡πÄ‡∏Å‡∏¥‡∏£‡πå‡∏ï", type: "number" },
      {
        key: "Number_of_Times_Eaten_Solid_Food",
        label: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏Ç‡πá‡∏á",
        type: "dropdown",
        options: [
          "1-2 ‡∏°‡∏∑‡πâ‡∏≠",
          "3-4 ‡∏°‡∏∑‡πâ‡∏≠",
          "4 ‡∏°‡∏∑‡πâ‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ",
          "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ"
        ]
      }
    ],
  },
];

function NutritionForm() {
  const navigate = useNavigate();
  const location = useLocation();

  const pages = [
    "/form/general",
    "/form/caregiver",
    "/form/nutrition",
    "/form/sanitation",
  ];

  const currentIndex = pages.indexOf(location.pathname);
  const nextIndex = (currentIndex + 1) % pages.length;
  const nextPage = pages[nextIndex];
  const prevIndex = (currentIndex - 1 + pages.length) % pages.length;
  const prevPage = pages[prevIndex];
  const [patientId, setPatientId] = useState(null); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
  const [childData, setChildData] = useState(null); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°


  const [formData, setFormData] = useState(() => {
    const saved = localStorage.getItem("nutritionFormData");
    return saved ? JSON.parse(saved) : {};
  });
  useEffect(() => {
    localStorage.setItem("nutritionFormData", JSON.stringify(formData));
  }, [formData]);

  const [expandedGroup, setExpandedGroup] = useState(0);
  const [completedGroups, setCompletedGroups] = useState([]);
  const [completion, setCompletion] = useState(0);

  // üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalProgress ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô GroupedDataInput
  const totalProgress =
    (parseInt(localStorage.getItem("generalProgress") || 0) +
      parseInt(localStorage.getItem("caregiverProgress") || 0) +
      parseInt(localStorage.getItem("nutritionProgress") || 0) +
      parseInt(localStorage.getItem("sanitationProgress") || 0)) / 4;


  const handleChange = (key, value) => {
    setFormData((prev) => ({
      ...prev,
      [key]: value,
    }));
  };

  const handleGroupComplete = (index) => {
    const group = nutritionGroups[index];

    const requiredKeys = group.questions.map(q => q.key);

    const isComplete = requiredKeys.every(key => {
      const value = formData[key];
      const question = group.questions.find(q => q.key === key);

      if (question.type === "number") {
        return value !== "" && value !== undefined;
      } else if (question.type === "dropdown") {
        return value !== "" && value !== undefined;
      }

      return true;
    });

    if (!isComplete) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚úÖ");
      return;
    }

    setCompletedGroups((prevCompletedGroups) => {
      let newCompleted = prevCompletedGroups;

      if (!prevCompletedGroups.includes(index)) {
        newCompleted = [...prevCompletedGroups, index];
      }

      if (index + 1 < nutritionGroups.length) {
        setExpandedGroup(index + 1);
      } else {
        setExpandedGroup(-1);
      }

      localStorage.setItem("nutritionCompletedGroups", JSON.stringify(newCompleted));

      return newCompleted;
    });
  };

  const toggleGroup = (index) => {
    setExpandedGroup((prev) => (prev === index ? -1 : index));
  };

  const handleSubmit = () => {
    if (!patientId) {
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ");
      return;
    }

    const dataToSend = {
      patient_id: patientId,
      ...formData,
      created_at: new Date().toISOString(),
    };

    axios.post("http://localhost:5000/predictions", dataToSend)
      .then(() => {
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
      })
      .catch((err) => {
        console.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
      });
  };
  useEffect(() => {
    const savedCompleted = localStorage.getItem("nutritionCompletedGroups");
    if (savedCompleted) {
      setCompletedGroups(JSON.parse(savedCompleted));
    }
  }, []);


  useEffect(() => {
    const totalGroups = nutritionGroups.length;
    const completedCount = completedGroups.length;
    const percent = Math.round((completedCount / totalGroups) * 100);
    setCompletion(percent);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏á localStorage ‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô GroupedDataInput)
    localStorage.setItem("nutritionProgress", percent.toString());
  }, [completedGroups]);
  useEffect(() => {
    const childId = localStorage.getItem("childId");
    if (childId) {
      axios.get(`http://localhost:5000/patients/${childId}`)
        .then((res) => {
          setChildData(res.data);
          setPatientId(childId);
        })
        .catch((err) => console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err));
    } else {
      console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö childId ‡πÉ‡∏ô localStorage");
    }
  }, []);

  return (
    <div className="dashboard-container">
      <Header currentPage="form-nutrition" />

      {/* ‚úÖ ‡πÅ‡∏ñ‡∏ö progress ‡∏£‡∏ß‡∏° */}
      <div className="overall-progress">
        <div className="progress-info">
          <span className="progress-label-main">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°</span>
          <span className="progress-percentage">{Math.round(totalProgress)}%</span>
        </div>
        <div className="main-progress-container">
          <div className="main-progress-bar" style={{ width: `${totalProgress}%` }} />
        </div>
        <p className="progress-status">
          {totalProgress === 100
            ? "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! üéâ"
            : `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å ${100 - Math.round(totalProgress)}% ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å`}
        </p>
      </div>

      <div className="nutrition-form-container">
        <div className="nutrition-card">
          {childData && (
            <div style={{ textAlign: "center", marginBottom: "1rem" }}>
              <h3>‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á: {childData.prefix_name_child} {childData.first_name_child} {childData.last_name_child}</h3>
              <p>HN: {childData.hn}</p>
            </div>
          )}

          <h2 className="nutrition-title">‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å</h2>
          <p className="nutrition-subtitle">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å</p>

          {/* ‚úÖ Progress */}
          <div className="progress-section">
            <span className="progress-label">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {completion}%</span>
            <div className="progress-bar-wrapper">
              <div className="progress-bar-fill" style={{ width: `${completion}%` }} />
            </div>
          </div>

          {/* ‚úÖ Groups */}
          {nutritionGroups.map((group, index) => (
            <div className="accordion-group" key={index}>
              <button
                className={`accordion-toggle ${completedGroups.includes(index) ? "completed-group" : ""}`}
                onClick={() => toggleGroup(index)}
              >
                {group.groupTitle}
                <span>{expandedGroup === index ? "‚ñ≤" : "‚ñº"}</span>
              </button>

              {expandedGroup === index && (
                <div className="accordion-content">
                  {group.groupNote && <div className="group-note">{group.groupNote}</div>}

                  <div className="checkbox-grid">
                    {group.questions.map(({ key, label, type }) =>
                      type === "checkbox" ? (
                        <div className="checkbox-row" key={key}>
                          <input
                            type="checkbox"
                            id={key}
                            checked={formData[key] || false}
                            onChange={(e) => handleChange(key, e.target.checked)}
                          />
                          <label htmlFor={key}>{label}</label>
                        </div>
                      ) : null
                    )}
                  </div>


                  {group.questions.some((q) => q.type === "number" || q.type === "dropdown") && (
                    <div className="number-grid">

                      {group.questions.map(({ key, label, type, options }) => {
                        if (type === "number") {

                          return (
                            <div className="number-item" key={key}>
                              <label className="question-label">
                                {label}
                                <input
                                  type="number"
                                  min="0"
                                  value={formData[key] || ""}
                                  onChange={(e) => {
                                    const value = e.target.value;
                                    if (value === "" || Number(value) >= 0) {
                                      handleChange(key, value);
                                    }
                                  }}
                                  className="number-input"
                                />

                              </label>
                            </div>
                          );
                        } else if (type === "dropdown") {
                          return (
                            <div className="number-item" key={key}>
                              <label className="question-label">
                                {label}
                                <select
                                  value={formData[key] || ""}
                                  onChange={(e) => handleChange(key, e.target.value)}
                                  className="number-input"
                                >
                                  <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
                                  {options.map((opt, idx) => (
                                    <option key={idx} value={opt}>{opt}</option>
                                  ))}
                                </select>
                              </label>
                            </div>
                          );
                        }

                        return null;
                      })}
                    </div>
                  )}

                  {index === nutritionGroups.length - 1 ? (
                    <button className="complete-btn" onClick={() => { handleGroupComplete(index); handleSubmit(); }}>
                      ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    </button>
                  ) : (
                    <button className="complete-btn" onClick={() => handleGroupComplete(index)}>
                      ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ûú
                    </button>
                  )}

                </div>
              )}
            </div>
          ))}

          {completedGroups.length === nutritionGroups.length && totalProgress === 100 && (
            <button
              className="submit-btn"
              onClick={() => navigate("/parent-risk-assessment")}
              style={{ background: "linear-gradient(to right, #22c55e, #16a34a)" }}
            >
              ‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏∏‡∏û‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
            </button>
          )}

          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              gap: "1rem",
              marginTop: "2rem",
            }}
          >
            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ */}
            <button
              className="submit-btn"
              onClick={() => navigate(prevPage)}
              style={{ background: "linear-gradient(to right, #3b82f6, #2563eb)" }}
            >
              ‚óÄ ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </button>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ GroupedDataInput */}
            <button
              className="submit-btn"
              onClick={() => navigate("/parent-risk-assessment")} // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á path ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ GroupedDataInput
              style={{ background: "linear-gradient(to right, #f59e0b, #f97316)" }}
            >
              üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà */}
            <button
              className="submit-btn"
              onClick={() => navigate(nextPage)}
              style={{ background: "linear-gradient(to right, #10b981, #06b6d4)" }}
            >
              ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ûú
            </button>
          </div>



        </div>
      </div>
      <Footer />
    </div>
  );
}

export default NutritionForm;
